package com.learning.skilclasses;

import android.Manifest;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.GlideException;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.developer.filepicker.controller.DialogSelectionListener;
import com.developer.filepicker.model.DialogConfigs;
import com.developer.filepicker.model.DialogProperties;
import com.developer.filepicker.view.FilePickerDialog;
import com.learning.skilclasses.preferences.UserSession;

import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import de.hdodenhof.circleimageview.CircleImageView;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class Profile extends AppCompatActivity {

    @BindView(R.id.image)
    CircleImageView imageView;
    @BindView(R.id.upload_image)
    LinearLayout uploadImage;
    OkHttpClient okHttpClient;
    FilePickerDialog dialog;

    @BindView(R.id.progress)
    ProgressBar progressBar;

    @OnClick(R.id.upload_image)
    void uploadImagePhp() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 101);
        }
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 102);
        }
        DialogProperties properties = new DialogProperties();
        properties.selection_mode = DialogConfigs.SINGLE_MODE;
        properties.selection_type = DialogConfigs.FILE_SELECT;
        properties.root = new File(DialogConfigs.DEFAULT_DIR);
        properties.error_dir = new File(DialogConfigs.DEFAULT_DIR);
        properties.offset = new File(DialogConfigs.DEFAULT_DIR);
        properties.extensions = null;
        properties.show_hidden_files = false;
        dialog = new FilePickerDialog(this, properties);
        dialog.setTitle("Select Prescription to Upload");
        dialog.setDialogSelectionListener(new DialogSelectionListener() {
            @Override
            public void onSelectedFilePaths(String[] files) {
                try {
                    if (files.length != 0) {
                        InputStream stream = getContentResolver().openInputStream(Uri.fromFile(new File(files[0])));
                        Bitmap bitmap = BitmapFactory.decodeStream(stream);
                        stream.close();
                        String uploadResponse = uploadPic("http://192.168.43.168:80/objects/upload_image.php", imageToString(bitmap), new UserSession(Profile.this).getUserDetails().get(UserSession.KEY_ID));
                        Log.d("updateresponse", uploadResponse);
                        Log.d("email", new UserSession(Profile.this).getUserDetails().get(UserSession.KEY_ID));
                        JSONObject jsonObject1 = new JSONObject(uploadResponse);
                        boolean status = false;
                        status = jsonObject1.getBoolean("status");
                        if (status) {
                            Toast.makeText(Profile.this, "Uploaded Image", Toast.LENGTH_SHORT).show();
                            Log.d("image_path", jsonObject1.getString("image"));
                            String imgUrl = jsonObject1.getString("image");
                            progressBar.setVisibility(View.VISIBLE);
                            new Handler().postDelayed(() -> {
                                Glide.with(Profile.this).load(imgUrl)
                                        .diskCacheStrategy(DiskCacheStrategy.NONE)
                                        .skipMemoryCache(true)
                                        .listener(new RequestListener<Drawable>() {
                                            @Override
                                            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {
                                                progressBar.setVisibility(View.GONE);
                                                return false;
                                            }

                                            @Override
                                            public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {
                                                progressBar.setVisibility(View.GONE);
                                                return false;
                                            }
                                        })
                                        .into(imageView);
                            }, 3000);
                        } else {

                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });
        dialog.show();
    }

    public final static int RequestCode = 100;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_profile);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setTitle("Your Profile");
        getSupportActionBar().setDisplayHomeAsUpEnabled(false);
        getSupportActionBar().setHomeButtonEnabled(true);
        ButterKnife.bind(this);
    }

//    @Override
//    public void onActivityResult(int requestCode, int resultCode, Intent data) {
//        super.onActivityResult(requestCode, resultCode, data);
//        if (resultCode == Activity.RESULT_OK && requestCode == RequestCode) {
//            Uri filePath = data.getData();
//
//            try {
//
//                InputStream stream = getContentResolver().openInputStream(filePath);
//                Bitmap bitmap = BitmapFactory.decodeStream(stream);
//                String uploadResponse = uploadPic("http://192.168.43.168:80/objects/upload_image.php", imageToString(bitmap), new UserSession(this).getUserDetails().get(UserSession.KEY_EMAIL));
//                Log.d("update", uploadResponse);
//                JSONObject jsonObject1 = new JSONObject(uploadResponse);
//                boolean status = jsonObject1.getBoolean("status");
//                if (status) {
//                    Toast.makeText(this, "Uploaded Image", Toast.LENGTH_SHORT).show();
//                } else {
//
//                }
//
//                ArrayList<String> returnValue = data.getStringArrayListExtra(Pix.IMAGE_RESULTS);
//                Glide.with(this).load(returnValue.get(0)).into(imageView);
////            BitmapDrawable bitmapDrawable = (BitmapDrawable) imageView.getDrawable();
////            ByteArrayOutputStream baos = new ByteArrayOutputStream();
////            Bitmap bitmap = bitmapDrawable.getBitmap();
////            bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
////            byte[] imageBytes = baos.toByteArray();
////            String imageString = Base64.encodeToString(imageBytes, Base64.DEFAULT);
////            Log.d("Base", imageString);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        }
//
//    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
        switch (requestCode) {
            case FilePickerDialog.EXTERNAL_READ_PERMISSION_GRANT: {
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    if (dialog != null) {   //Show dialog if the read permission has been granted.
                        dialog.show();
                    }
                } else {
                    //Permission has not been granted. Notify the user.
                    Toast.makeText(Profile.this, "Permission is Required for getting list of files", Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    public String uploadPic(String url, String imgString, String email) throws IOException {
        if (okHttpClient == null) {
            okHttpClient = new OkHttpClient();
        }
        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("id", email)
                .addFormDataPart("image", imgString)
                .build();
        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .header("Accept", "application/json")
                .header("Content-Type", "application/json")
                .build();
        try (Response response = okHttpClient.newCall(request).execute()) {
            return response.body().string();
        }
    }

    private String imageToString(Bitmap bitmap) {
        ByteArrayOutputStream bao = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bao);
        byte[] imageBytes = bao.toByteArray();

        String encodedImage = Base64.encodeToString(imageBytes, Base64.DEFAULT);
        return encodedImage;
    }

}
                                                 