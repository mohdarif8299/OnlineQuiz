package com.learning.skilclasses;

import android.Manifest;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.engine.GlideException;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.developer.filepicker.controller.DialogSelectionListener;
import com.developer.filepicker.model.DialogConfigs;
import com.developer.filepicker.model.DialogProperties;
import com.developer.filepicker.view.FilePickerDialog;
import com.learning.skilclasses.preferences.UserSession;

import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import de.hdodenhof.circleimageview.CircleImageView;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class Profile extends AppCompatActivity {

    @BindView(R.id.image)
    CircleImageView imageView;
    @BindView(R.id.upload_image)
    LinearLayout uploadImage;
    OkHttpClient okHttpClient;
    FilePickerDialog dialog;

    @BindView(R.id.progress)
    ProgressBar progressBar;

    @OnClick(R.id.upload_image)
    void uploadImagePhp() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 101);
        }
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 102);
        }
        DialogProperties properties = new DialogProperties();
        properties.selection_mode = DialogConfigs.SINGLE_MODE;
        properties.selection_type = DialogConfigs.FILE_SELECT;
        properties.root = new File(DialogConfigs.DEFAULT_DIR);
        properties.error_dir = new File(DialogConfigs.DEFAULT_DIR);
        properties.offset = new File(DialogConfigs.DEFAULT_DIR);
        properties.extensions = null;
        properties.show_hidden_files = false;
        dialog = new FilePickerDialog(this, properties);
        dialog.setTitle("Select Prescription to Upload");
        dialog.setDialogSelectionListener(new DialogSelectionListener() {
            @Override
            public void onSelectedFilePaths(String[] files) {
                try {
                    if (files.length != 0) {
                        InputStream stream = getContentResolver().openInputStream(Uri.fromFile(new File(files[0])));
                        Bitmap bitmap = BitmapFactory.decodeStream(stream);
                        stream.close();
                        String uploadResponse = uploadPic("http://192.168.43.168:80/objects/upload_image.php", imageToString(bitmap), new UserSession(Profile.this).getUserDetails().get(UserSession.KEY_ID));
                        Log.d("updateresponse", uploadResponse);
                        Log.d("email", new UserSession(Profile.this).getUserDetails().get(UserSession.KEY_ID));
                        JSONObject jsonObject1 = new JSONObject(uploadResponse);
                        boolean status = false;
                        status = jsonObject1.getBoolean("status");
                        if (status) {
                            Toast.makeText(Profile.this, "Uploaded Image", Toast.LENGTH_SHORT).show();
                            Log.d("image_path", jsonObject1.getString("image_path"));
                            String imgUrl = jsonObject1.getString("image_path");
                            progressBar.setVisibility(View.VISIBLE);
                            new Handler().postDelayed(() -> {
                                Glide.with(Profile.this).load(imgUrl)
                                        .listener(new RequestListener<Drawable>() {
                                            @Override
                                            public 